        -:    0:Source:/home/tequhella/Documents/VScode/ModuleDeploiement/test_Age.cpp
        -:    1:#define BOOST_TEST_DYN_LINK
        -:    2:#define BOOST_TEST_MODULE MyTests
        -:    3:#include <boost/test/unit_test.hpp>
        -:    4:#include "Age.cpp"
        -:    5:
        -:    6:BOOST_AUTO_TEST_SUITE(AgeTests)
        -:    7:
        4:    8:BOOST_AUTO_TEST_CASE(TestCalculateAge)
        -:    9:{
        -:   10:    /**************EQUAL**************/
        -:   11:    // Test 1
        2:   12:    Date birth1 = { 1990, 1, 1 };
        2:   13:    BOOST_CHECK_EQUAL(Date::calculateAge(&birth1), 34);
        -:   14:
        -:   15:    // Test 2
        2:   16:    Date birth2 = { 2000, 1, 1 };
        2:   17:    BOOST_CHECK_EQUAL(Date::calculateAge(&birth2), 24);
        -:   18:
        -:   19:    // Test 3
        2:   20:    Date birth3 = { 2010, 5, 13 };
        2:   21:    BOOST_CHECK_EQUAL(Date::calculateAge(&birth3), 13);
        -:   22:
        -:   23:    /*************NOT EQUAL************/
        -:   24:    // Test 4
        2:   25:    Date birth4 = { 1990, 1, 1 };
        2:   26:    BOOST_CHECK_NE(Date::calculateAge(&birth4), 35);
        -:   27:
        -:   28:    // Test 5
        2:   29:    Date birth5 = { 2000, 1, 1 };
        2:   30:    BOOST_CHECK_NE(Date::calculateAge(&birth5), 25);
        -:   31:
        -:   32:    // Test 6
        2:   33:    Date birth6 = { 2010, 1, 1 };
        2:   34:    BOOST_CHECK_NE(Date::calculateAge(&birth6), 15);
        2:   35:}
------------------
_ZN8AgeTests16TestCalculateAge11test_methodEv:
        2:    8:BOOST_AUTO_TEST_CASE(TestCalculateAge)
        -:    9:{
        -:   10:    /**************EQUAL**************/
        -:   11:    // Test 1
        2:   12:    Date birth1 = { 1990, 1, 1 };
        2:   13:    BOOST_CHECK_EQUAL(Date::calculateAge(&birth1), 34);
        -:   14:
        -:   15:    // Test 2
        2:   16:    Date birth2 = { 2000, 1, 1 };
        2:   17:    BOOST_CHECK_EQUAL(Date::calculateAge(&birth2), 24);
        -:   18:
        -:   19:    // Test 3
        2:   20:    Date birth3 = { 2010, 5, 13 };
        2:   21:    BOOST_CHECK_EQUAL(Date::calculateAge(&birth3), 13);
        -:   22:
        -:   23:    /*************NOT EQUAL************/
        -:   24:    // Test 4
        2:   25:    Date birth4 = { 1990, 1, 1 };
        2:   26:    BOOST_CHECK_NE(Date::calculateAge(&birth4), 35);
        -:   27:
        -:   28:    // Test 5
        2:   29:    Date birth5 = { 2000, 1, 1 };
        2:   30:    BOOST_CHECK_NE(Date::calculateAge(&birth5), 25);
        -:   31:
        -:   32:    // Test 6
        2:   33:    Date birth6 = { 2010, 1, 1 };
        2:   34:    BOOST_CHECK_NE(Date::calculateAge(&birth6), 15);
        2:   35:}
------------------
_ZN8AgeTestsL24TestCalculateAge_invokerEv:
        2:    8:BOOST_AUTO_TEST_CASE(TestCalculateAge)
------------------
        -:   36:
        -:   37:BOOST_AUTO_TEST_SUITE_END()
        -:   38:
        -:   39:// Additional tests
        -:   40:
        -:   41:BOOST_AUTO_TEST_SUITE(AdditionalAgeTests)
        -:   42:
        4:   43:BOOST_AUTO_TEST_CASE(TestCalculateAgeInvalidObject)
        -:   44:{
        -:   45:    // Test 1
        -:   46:    //int invalidObject = 10;
        -:   47:    //BOOST_CHECK_THROW(Date::calculateAge(reinterpret_cast<Date*>(&invalidObject)), std::invalid_argument);
        -:   48:
        -:   49:    // should return an invalid argument exception with the message "Mauvais objet envoyé"
        -:   50:    class TestClass {};
        -:   51:
        2:   52:    TestClass* invalidObject = new TestClass();
        -:   53:
       6*:   54:    BOOST_CHECK_EXCEPTION(
        -:   55:        Date::calculateAge(reinterpret_cast<Date*>(invalidObject)),
        -:   56:        std::invalid_argument,
        -:   57:        [](const std::invalid_argument& e)
        -:   58:        {
        -:   59:            BOOST_TEST_MESSAGE("Exception thrown: " << e.what());
        -:   60:            return std::string(e.what()) == "Mauvais objet envoyé";
        -:   61:        }
        -:   62:    );
        -:   63:
        2:   64:    delete invalidObject;
        2:   65:}
------------------
_ZN18AdditionalAgeTests29TestCalculateAgeInvalidObject11test_methodEv:
        2:   43:BOOST_AUTO_TEST_CASE(TestCalculateAgeInvalidObject)
        -:   44:{
        -:   45:    // Test 1
        -:   46:    //int invalidObject = 10;
        -:   47:    //BOOST_CHECK_THROW(Date::calculateAge(reinterpret_cast<Date*>(&invalidObject)), std::invalid_argument);
        -:   48:
        -:   49:    // should return an invalid argument exception with the message "Mauvais objet envoyé"
        -:   50:    class TestClass {};
        -:   51:
        2:   52:    TestClass* invalidObject = new TestClass();
        -:   53:
       4*:   54:    BOOST_CHECK_EXCEPTION(
        -:   55:        Date::calculateAge(reinterpret_cast<Date*>(invalidObject)),
        -:   56:        std::invalid_argument,
        -:   57:        [](const std::invalid_argument& e)
        -:   58:        {
        -:   59:            BOOST_TEST_MESSAGE("Exception thrown: " << e.what());
        -:   60:            return std::string(e.what()) == "Mauvais objet envoyé";
        -:   61:        }
        -:   62:    );
        -:   63:
        2:   64:    delete invalidObject;
        2:   65:}
------------------
_ZN18AdditionalAgeTestsL37TestCalculateAgeInvalidObject_invokerEv:
        2:   43:BOOST_AUTO_TEST_CASE(TestCalculateAgeInvalidObject)
------------------
        -:   66:
        4:   67:BOOST_AUTO_TEST_CASE(TestCalculateAgeNoArgument)
        -:   68:{
        -:   69:    // Test 1
       6*:   70:    BOOST_CHECK_EXCEPTION(
        -:   71:        Date::calculateAge(nullptr),
        -:   72:        std::invalid_argument,
        -:   73:        [](const std::invalid_argument& e)
        -:   74:        {
        -:   75:            BOOST_TEST_MESSAGE("Exception thrown: " << e.what());
        -:   76:            return std::string(e.what()) == "Aucun argument envoyé";
        -:   77:        }
        -:   78:    );
        2:   79:}
------------------
_ZN18AdditionalAgeTests26TestCalculateAgeNoArgument11test_methodEv:
        2:   67:BOOST_AUTO_TEST_CASE(TestCalculateAgeNoArgument)
        -:   68:{
        -:   69:    // Test 1
       4*:   70:    BOOST_CHECK_EXCEPTION(
        -:   71:        Date::calculateAge(nullptr),
        -:   72:        std::invalid_argument,
        -:   73:        [](const std::invalid_argument& e)
        -:   74:        {
        -:   75:            BOOST_TEST_MESSAGE("Exception thrown: " << e.what());
        -:   76:            return std::string(e.what()) == "Aucun argument envoyé";
        -:   77:        }
        -:   78:    );
        2:   79:}
------------------
_ZN18AdditionalAgeTestsL34TestCalculateAgeNoArgument_invokerEv:
        2:   67:BOOST_AUTO_TEST_CASE(TestCalculateAgeNoArgument)
------------------
        -:   80:
        4:   81:BOOST_AUTO_TEST_CASE(TestCalculateAgeFutureDate)
        -:   82:{
        -:   83:    // Test 1
        2:   84:    Date birth = { 2030, 1, 1 };
       6*:   85:    BOOST_CHECK_EXCEPTION(
        -:   86:        Date::calculateAge(&birth),
        -:   87:        std::invalid_argument,
        -:   88:        [](const std::invalid_argument& e)
        -:   89:        {
        -:   90:            BOOST_TEST_MESSAGE("Exception thrown: " << e.what());
        -:   91:            return std::string(e.what()) == "La date envoyée est fausse";
        -:   92:        }
        -:   93:    );
        2:   94:}
------------------
_ZN18AdditionalAgeTests26TestCalculateAgeFutureDate11test_methodEv:
        2:   81:BOOST_AUTO_TEST_CASE(TestCalculateAgeFutureDate)
        -:   82:{
        -:   83:    // Test 1
        2:   84:    Date birth = { 2030, 1, 1 };
       4*:   85:    BOOST_CHECK_EXCEPTION(
        -:   86:        Date::calculateAge(&birth),
        -:   87:        std::invalid_argument,
        -:   88:        [](const std::invalid_argument& e)
        -:   89:        {
        -:   90:            BOOST_TEST_MESSAGE("Exception thrown: " << e.what());
        -:   91:            return std::string(e.what()) == "La date envoyée est fausse";
        -:   92:        }
        -:   93:    );
        2:   94:}
------------------
_ZN18AdditionalAgeTestsL34TestCalculateAgeFutureDate_invokerEv:
        2:   81:BOOST_AUTO_TEST_CASE(TestCalculateAgeFutureDate)
------------------
        -:   95:
        -:   96:BOOST_AUTO_TEST_SUITE_END()
