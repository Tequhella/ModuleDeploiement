        -:    0:Source:/home/tequhella/Documents/VScode/ModuleDeploiement/Form.cpp
        -:    1:#include <regex>
        -:    2:#include <map>
        -:    3:#include <gtkmm-3.0/gtkmm.h>
        -:    4:#include "Age.cpp"
        -:    5:
        -:    6:class Form {
        -:    7:private:
        -:    8:    std::string name;
        -:    9:    std::string firstName;
        -:   10:    std::string mail;
        -:   11:    std::string birthday;
        -:   12:    std::string city;
        -:   13:    std::string zipCode;
        -:   14:
        -:   15:    std::map<std::string, std::string> errors;
        -:   16:
        -:   17:public:
       17:   18:    Form()
       17:   19:    {
       17:   20:        errors["email"] = "";
       17:   21:        errors["name"] = "";
       17:   22:        errors["firstName"] = "";
       17:   23:        errors["birthday"] = "";
       17:   24:        errors["zipCode"] = "";
       17:   25:    }
        -:   26:
        5:   27:    void setName(const std::string& name)
        -:   28:    {
        5:   29:        this->name = name;
        5:   30:        validateName(name);
        5:   31:    }
        -:   32:
        5:   33:    void setFirstName(const std::string& firstName)
        -:   34:    {
        5:   35:        this->firstName = firstName;
        5:   36:        validateFirstname(firstName);
        5:   37:    }
        -:   38:
        5:   39:    void setMail(const std::string& mail)
        -:   40:    {
        5:   41:        this->mail = mail;
        5:   42:        validateEmail(mail);
        5:   43:    }
        -:   44:
        5:   45:    void setBirthday(const std::string& birthday)
        -:   46:    {
        5:   47:        this->birthday = birthday;
        5:   48:        validateAge(birthday);
        5:   49:    }
        -:   50:
        4:   51:    void setCity(const std::string& city)
        -:   52:    {
        4:   53:        this->city = city;
        4:   54:    }
        -:   55:
        5:   56:    void setZipCode(const std::string& zipCode)
        -:   57:    {
        5:   58:        this->zipCode = zipCode;
        5:   59:        validateZIP(zipCode);
        5:   60:    }
        -:   61:
        5:   62:    void validateName(const std::string& name)
        -:   63:    {
        5:   64:        if (!std::regex_match(name, std::regex("^[a-zA-Z]+$")))
        -:   65:        {
        1:   66:            errors["name"] = "Invalid name";
        -:   67:        } else
        -:   68:        {
        4:   69:            errors["name"] = "";
        -:   70:        }
        5:   71:    }
        -:   72:
        5:   73:    void validateFirstname(const std::string& firstName)
        -:   74:    {
        5:   75:        if (!std::regex_match(firstName, std::regex("^[a-zA-Z]+$")))
        -:   76:        {
        1:   77:            errors["firstName"] = "Invalid firstname";
        -:   78:        } else
        -:   79:        {
        4:   80:            errors["firstName"] = "";
        -:   81:        }
        5:   82:    }
        -:   83:
        5:   84:    void validateEmail(const std::string& email)
        -:   85:    {
        5:   86:        if (!std::regex_match(email, std::regex("^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$")))
        -:   87:        {
        3:   88:            errors["email"] = "Invalid email";
        -:   89:        } else
        -:   90:        {
        2:   91:            errors["email"] = "";
        -:   92:        }
        5:   93:    }
        -:   94:
        6:   95:    void validateAge(const std::string& birthday)
        -:   96:    {
        6:   97:        std::regex dateRegex("^(\\d{4})-(\\d{2})-(\\d{2})$");
        6:   98:        std::smatch match;
        6:   99:        if (!std::regex_match(birthday, match, dateRegex))
        -:  100:        {
        1:  101:            errors["birthday"] = "Invalid date";
        -:  102:        } else
        -:  103:        {
        5:  104:            int year = std::stoi(match[1]);
        5:  105:            int month = std::stoi(match[2]);
        5:  106:            int day = std::stoi(match[3]);
        5:  107:            Date birth = { year, month, day };
        -:  108:            try 
        -:  109:            {
        5:  110:                Date::calculateAge(&birth);
        4:  111:                errors["birthday"] = "";
        1:  112:            } catch (std::invalid_argument& e)
        -:  113:            {
        1:  114:                errors["birthday"] = e.what();
        1:  115:                throw e;
        1:  116:            }
        -:  117:        }
        7:  118:    }
        -:  119:
        5:  120:    void validateZIP(const std::string& zipCode)
        -:  121:    {
        5:  122:        if (!std::regex_match(zipCode, std::regex("^\\d{5}$")))
        -:  123:        {
        1:  124:            errors["zipCode"] = "Invalid ZIP code";
        -:  125:        } else
        -:  126:        {
        4:  127:            errors["zipCode"] = "";
        -:  128:        }
        5:  129:    }
        -:  130:
       11:  131:    std::map<std::string, std::string> getErrors()
        -:  132:    {
       11:  133:        return errors;
        -:  134:    }
        -:  135:
        3:  136:    bool isValid()
        -:  137:    {
       10:  138:        for (auto& error : errors)
        -:  139:        {
        9:  140:            if (!error.second.empty())
        -:  141:            {
        2:  142:                return false;
        -:  143:            }
        -:  144:        }
        1:  145:        return true;
        -:  146:    }
        -:  147:
        2:  148:    bool isEmpty(std::vector<std::string> entries)
        -:  149:    {
        8:  150:        for (auto& entry : entries)
        -:  151:        {
        7:  152:            if (entry.empty())
        -:  153:            {
        1:  154:                return true;
        -:  155:            }
        -:  156:        }
        1:  157:        return false;
        -:  158:    }
        -:  159:
        -:  160:    std::string getError(const std::string& key)
        -:  161:    {
        -:  162:        return errors[key];
        -:  163:    }
        -:  164:
        1:  165:    void printErrors()
        -:  166:    {
        6:  167:        for (auto& error : errors)
        -:  168:        {
        5:  169:            if (!error.second.empty())
        -:  170:            {
        1:  171:                std::cout << error.second << std::endl;
        -:  172:            }
        -:  173:        }
        1:  174:    }
        -:  175:};
